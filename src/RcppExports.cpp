// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// inv_rcpp
arma::mat inv_rcpp(arma::mat mat_, double tau);
RcppExport SEXP _gpbart_inv_rcpp(SEXP mat_SEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type mat_(mat_SEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(inv_rcpp(mat_, tau));
    return rcpp_result_gen;
END_RCPP
}
// pinv_rcpp
arma::mat pinv_rcpp(arma::mat mat_, double tau);
RcppExport SEXP _gpbart_pinv_rcpp(SEXP mat_SEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type mat_(mat_SEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(pinv_rcpp(mat_, tau));
    return rcpp_result_gen;
END_RCPP
}
// gamma_pdf
double gamma_pdf(double x, double a, double b);
RcppExport SEXP _gpbart_gamma_pdf(SEXP xSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(gamma_pdf(x, a, b));
    return rcpp_result_gen;
END_RCPP
}
// r_gamma_pdf
double r_gamma_pdf(double x, double a, double b);
RcppExport SEXP _gpbart_r_gamma_pdf(SEXP xSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(r_gamma_pdf(x, a, b));
    return rcpp_result_gen;
END_RCPP
}
// print_mat_subset
void print_mat_subset(arma::mat X);
RcppExport SEXP _gpbart_print_mat_subset(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    print_mat_subset(X);
    return R_NilValue;
END_RCPP
}
// log_dmvn
double log_dmvn(arma::vec& x, arma::mat& Sigma);
RcppExport SEXP _gpbart_log_dmvn(SEXP xSEXP, SEXP SigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Sigma(SigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(log_dmvn(x, Sigma));
    return rcpp_result_gen;
END_RCPP
}
// cppgpbart
Rcpp::List cppgpbart(arma::mat x_train, arma::mat x_train_gp, arma::vec y_train, arma::mat x_test, arma::mat x_test_gp, int n_tree, int node_min_size, int n_mcmc, int n_burn, double tau, double mu, double tau_mu, double alpha, double beta, double a_tau, double d_tau, double nu, bool stump_bool, bool sample, bool sample_phi, bool verbose, bool no_rotation_bool, bool only_rotation_bool);
RcppExport SEXP _gpbart_cppgpbart(SEXP x_trainSEXP, SEXP x_train_gpSEXP, SEXP y_trainSEXP, SEXP x_testSEXP, SEXP x_test_gpSEXP, SEXP n_treeSEXP, SEXP node_min_sizeSEXP, SEXP n_mcmcSEXP, SEXP n_burnSEXP, SEXP tauSEXP, SEXP muSEXP, SEXP tau_muSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP a_tauSEXP, SEXP d_tauSEXP, SEXP nuSEXP, SEXP stump_boolSEXP, SEXP sampleSEXP, SEXP sample_phiSEXP, SEXP verboseSEXP, SEXP no_rotation_boolSEXP, SEXP only_rotation_boolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x_train(x_trainSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x_train_gp(x_train_gpSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y_train(y_trainSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x_test(x_testSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x_test_gp(x_test_gpSEXP);
    Rcpp::traits::input_parameter< int >::type n_tree(n_treeSEXP);
    Rcpp::traits::input_parameter< int >::type node_min_size(node_min_sizeSEXP);
    Rcpp::traits::input_parameter< int >::type n_mcmc(n_mcmcSEXP);
    Rcpp::traits::input_parameter< int >::type n_burn(n_burnSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type tau_mu(tau_muSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type a_tau(a_tauSEXP);
    Rcpp::traits::input_parameter< double >::type d_tau(d_tauSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< bool >::type stump_bool(stump_boolSEXP);
    Rcpp::traits::input_parameter< bool >::type sample(sampleSEXP);
    Rcpp::traits::input_parameter< bool >::type sample_phi(sample_phiSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< bool >::type no_rotation_bool(no_rotation_boolSEXP);
    Rcpp::traits::input_parameter< bool >::type only_rotation_bool(only_rotation_boolSEXP);
    rcpp_result_gen = Rcpp::wrap(cppgpbart(x_train, x_train_gp, y_train, x_test, x_test_gp, n_tree, node_min_size, n_mcmc, n_burn, tau, mu, tau_mu, alpha, beta, a_tau, d_tau, nu, stump_bool, sample, sample_phi, verbose, no_rotation_bool, only_rotation_bool));
    return rcpp_result_gen;
END_RCPP
}
// mat_init
arma::mat mat_init(int n);
RcppExport SEXP _gpbart_mat_init(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(mat_init(n));
    return rcpp_result_gen;
END_RCPP
}
// vec_init
arma::vec vec_init(int n);
RcppExport SEXP _gpbart_vec_init(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(vec_init(n));
    return rcpp_result_gen;
END_RCPP
}
// std_inv
arma::mat std_inv(arma::mat A, arma::vec diag);
RcppExport SEXP _gpbart_std_inv(SEXP ASEXP, SEXP diagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::vec >::type diag(diagSEXP);
    rcpp_result_gen = Rcpp::wrap(std_inv(A, diag));
    return rcpp_result_gen;
END_RCPP
}
// std_pinv
arma::mat std_pinv(arma::mat A, arma::vec diag);
RcppExport SEXP _gpbart_std_pinv(SEXP ASEXP, SEXP diagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::vec >::type diag(diagSEXP);
    rcpp_result_gen = Rcpp::wrap(std_pinv(A, diag));
    return rcpp_result_gen;
END_RCPP
}
// faster_simple_std_inv
arma::mat faster_simple_std_inv(arma::mat A, arma::vec diag);
RcppExport SEXP _gpbart_faster_simple_std_inv(SEXP ASEXP, SEXP diagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::vec >::type diag(diagSEXP);
    rcpp_result_gen = Rcpp::wrap(faster_simple_std_inv(A, diag));
    return rcpp_result_gen;
END_RCPP
}
// log_test
double log_test(double a);
RcppExport SEXP _gpbart_log_test(SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(log_test(a));
    return rcpp_result_gen;
END_RCPP
}
// faster_std_inv
arma::mat faster_std_inv(arma::mat A, arma::vec diag);
RcppExport SEXP _gpbart_faster_std_inv(SEXP ASEXP, SEXP diagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::vec >::type diag(diagSEXP);
    rcpp_result_gen = Rcpp::wrap(faster_std_inv(A, diag));
    return rcpp_result_gen;
END_RCPP
}
// rMVN2
arma::vec rMVN2(const arma::vec& b, const arma::mat& Q);
RcppExport SEXP _gpbart_rMVN2(SEXP bSEXP, SEXP QSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Q(QSEXP);
    rcpp_result_gen = Rcpp::wrap(rMVN2(b, Q));
    return rcpp_result_gen;
END_RCPP
}
// rMVNslow
arma::vec rMVNslow(const arma::vec& b, const arma::mat& Q);
RcppExport SEXP _gpbart_rMVNslow(SEXP bSEXP, SEXP QSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Q(QSEXP);
    rcpp_result_gen = Rcpp::wrap(rMVNslow(b, Q));
    return rcpp_result_gen;
END_RCPP
}
// matrix_mat
arma::mat matrix_mat(arma::cube array);
RcppExport SEXP _gpbart_matrix_mat(SEXP arraySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type array(arraySEXP);
    rcpp_result_gen = Rcpp::wrap(matrix_mat(array));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_gpbart_inv_rcpp", (DL_FUNC) &_gpbart_inv_rcpp, 2},
    {"_gpbart_pinv_rcpp", (DL_FUNC) &_gpbart_pinv_rcpp, 2},
    {"_gpbart_gamma_pdf", (DL_FUNC) &_gpbart_gamma_pdf, 3},
    {"_gpbart_r_gamma_pdf", (DL_FUNC) &_gpbart_r_gamma_pdf, 3},
    {"_gpbart_print_mat_subset", (DL_FUNC) &_gpbart_print_mat_subset, 1},
    {"_gpbart_log_dmvn", (DL_FUNC) &_gpbart_log_dmvn, 2},
    {"_gpbart_cppgpbart", (DL_FUNC) &_gpbart_cppgpbart, 23},
    {"_gpbart_mat_init", (DL_FUNC) &_gpbart_mat_init, 1},
    {"_gpbart_vec_init", (DL_FUNC) &_gpbart_vec_init, 1},
    {"_gpbart_std_inv", (DL_FUNC) &_gpbart_std_inv, 2},
    {"_gpbart_std_pinv", (DL_FUNC) &_gpbart_std_pinv, 2},
    {"_gpbart_faster_simple_std_inv", (DL_FUNC) &_gpbart_faster_simple_std_inv, 2},
    {"_gpbart_log_test", (DL_FUNC) &_gpbart_log_test, 1},
    {"_gpbart_faster_std_inv", (DL_FUNC) &_gpbart_faster_std_inv, 2},
    {"_gpbart_rMVN2", (DL_FUNC) &_gpbart_rMVN2, 2},
    {"_gpbart_rMVNslow", (DL_FUNC) &_gpbart_rMVNslow, 2},
    {"_gpbart_matrix_mat", (DL_FUNC) &_gpbart_matrix_mat, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_gpbart(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
